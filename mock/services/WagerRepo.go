// Code generated by mockery v2.14.0. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	togo "github.com/duongcongtoai/toytoytoy/sqlc/togo"
)

// WagerRepo is an autogenerated mock type for the WagerRepo type
type WagerRepo struct {
	mock.Mock
}

// CreateWager provides a mock function with given fields: ctx, db, arg
func (_m *WagerRepo) CreateWager(ctx context.Context, db togo.DBTX, arg togo.CreateWagerParams) (togo.Wager, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 togo.Wager
	if rf, ok := ret.Get(0).(func(context.Context, togo.DBTX, togo.CreateWagerParams) togo.Wager); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(togo.Wager)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, togo.DBTX, togo.CreateWagerParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWager provides a mock function with given fields: ctx, db, id
func (_m *WagerRepo) GetWager(ctx context.Context, db togo.DBTX, id int64) (togo.Wager, error) {
	ret := _m.Called(ctx, db, id)

	var r0 togo.Wager
	if rf, ok := ret.Get(0).(func(context.Context, togo.DBTX, int64) togo.Wager); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Get(0).(togo.Wager)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, togo.DBTX, int64) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWagerForUpdate provides a mock function with given fields: ctx, db, id
func (_m *WagerRepo) GetWagerForUpdate(ctx context.Context, db togo.DBTX, id int64) (togo.Wager, error) {
	ret := _m.Called(ctx, db, id)

	var r0 togo.Wager
	if rf, ok := ret.Get(0).(func(context.Context, togo.DBTX, int64) togo.Wager); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Get(0).(togo.Wager)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, togo.DBTX, int64) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWagers provides a mock function with given fields: ctx, db, arg
func (_m *WagerRepo) GetWagers(ctx context.Context, db togo.DBTX, arg togo.GetWagersParams) ([]togo.Wager, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 []togo.Wager
	if rf, ok := ret.Get(0).(func(context.Context, togo.DBTX, togo.GetWagersParams) []togo.Wager); ok {
		r0 = rf(ctx, db, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]togo.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, togo.DBTX, togo.GetWagersParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWager provides a mock function with given fields: ctx, db, arg
func (_m *WagerRepo) UpdateWager(ctx context.Context, db togo.DBTX, arg togo.UpdateWagerParams) error {
	ret := _m.Called(ctx, db, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, togo.DBTX, togo.UpdateWagerParams) error); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWagerRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewWagerRepo creates a new instance of WagerRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWagerRepo(t mockConstructorTestingTNewWagerRepo) *WagerRepo {
	mock := &WagerRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
