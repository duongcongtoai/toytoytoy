// Code generated by mockery v2.14.0. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	togo "github.com/duongcongtoai/toytoytoy/sqlc/togo"
)

// PurchaseRepo is an autogenerated mock type for the PurchaseRepo type
type PurchaseRepo struct {
	mock.Mock
}

// CreatePurchase provides a mock function with given fields: ctx, db, arg
func (_m *PurchaseRepo) CreatePurchase(ctx context.Context, db togo.DBTX, arg togo.CreatePurchaseParams) (togo.Purchase, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 togo.Purchase
	if rf, ok := ret.Get(0).(func(context.Context, togo.DBTX, togo.CreatePurchaseParams) togo.Purchase); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(togo.Purchase)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, togo.DBTX, togo.CreatePurchaseParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPurchaseRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewPurchaseRepo creates a new instance of PurchaseRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPurchaseRepo(t mockConstructorTestingTNewPurchaseRepo) *PurchaseRepo {
	mock := &PurchaseRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
